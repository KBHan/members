# The following types define the data model of the example service
# based on which the GraphQL API is generated

type User @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)

  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
  
  # Profile
  auth0UserId: String! @isUnique
  email: String! @isUnique
  name: String
  picture: String
 
  role: UserRole @defaultValue(value: REGULAR)
  

  # Project Management
  githubName: String
  flowdockName: String
  description: String

  
  # Uncomment below - you can declare relations between models like this

  # posts: [Post!]! @relation(name: "UserPosts")
}

enum UserRole {
   REGULAR,
   ADMIN
}

# Uncomment the model below as well

# type Post @model {
#   id: ID! @isUnique
#   title: String!
#
#   # Every relation also required a back-relation (to determine 1:1, 1:n or n:m)
#   author: User! @relation(name: "UserPosts")
# }

type Project @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)

  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)

  name: String! @isUnique
  description: String
}

type Entity @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!

  entityName: String! @isUnique
  entityEmail: String

  phone: String
  servDescription: String
  target: String
  type: String

  # Contact
  first: String
  last: String
  contactEmail: String
  contactPhone: String

  # Summary
  description: String

  # Address
  street: String
  city: String
  zip: String

  # Financial Services
  microLoans: Boolean
  capInvestment: Boolean
  indDevAccounts: Boolean
  comLoans: Boolean
  lendingCircle: Boolean
  
  # housing
  affHousing: Boolean
  comLandTrust: Boolean
  dnPmtAssistance: Boolean
  coHousing: Boolean

  # workforce
  skillDev: Boolean
  apprentice: Boolean
  onTheJob: Boolean
  resume: Boolean
  comOrg: Boolean

  # community
  econJustice: Boolean
  eduOrg: Boolean
  envJustice: Boolean
  foodJustice: Boolean
  healthJustice: Boolean
  immOrg: Boolean
  laborOrg: Boolean
  racialJustice: Boolean

  # advocacy
  advocacy: Boolean
  policy: Boolean

  # edu
  arts: Boolean
  compClass: Boolean
  finEdu: Boolean
  gedClass: Boolean
  youthDev: Boolean
  citizenship: Boolean

  # anchor
  localHire: Boolean
  localProcure: Boolean
  localInv: Boolean

  # direct
  foodBank: Boolean
  healthyFood: Boolean
  sharedSpace: Boolean
  transit: Boolean
  volunteer: Boolean
  healthCare: Boolean
  interpret: Boolean
  other: String
}